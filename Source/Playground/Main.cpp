/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "Precompiled.h"
#include "MainComponent.h"
#include "TinyRNN.h"

class GoDeeperApplication : public JUCEApplication
{
public:
    
    GoDeeperApplication() {}
    
    virtual const String getApplicationName() override
    { return ProjectInfo::projectName; }
    
    virtual const String getApplicationVersion() override
    { return ProjectInfo::versionString; }
    
    virtual bool moreThanOneInstanceAllowed() override
    { return true; }
    
    virtual void initialise (const String& commandLine) override
    {
        StringArray args = StringArray::fromTokens(commandLine, " ", "'\"");
        
        // Estimated production network memory size for float:
        //
        // (256, {128, 64, 128}, 256) == 5.7Mb
        // 1493058*4/1024/1024
        //
        // (256, {128, 128, 128}, 256) == 7.3Mb
        // 1912450*4/1024/1024
        //
        // (256, {128, 256, 128}, 256) == 11Mb
        // 2898690*4/1024/1024
        //
        // 256, {256, 128, 256}, 256 == 13.7Mb
        // 3590018*4/1024/1024
        
        //TinyRNN::Network::Ptr network = TinyRNN::Network::Prefabs::longShortTermMemory("Arpr", 256, {128, 128, 128}, 256);
        
        Logger::writeToLog(commandLine);
        // todo
        
        this->mainWindow = new MainWindow (this->getApplicationName());
    }

    virtual void shutdown() override
    {
        this->mainWindow = nullptr;
    }

    virtual void systemRequestedQuit() override
    {
        this->quit();
    }

    virtual void anotherInstanceStarted(const String& commandLine) override
    {
    }

    class MainWindow : public DocumentWindow
    {
    public:
        MainWindow(String name) : DocumentWindow(name,
                                                 Colours::lightgrey,
                                                 DocumentWindow::allButtons)
        {
            this->setUsingNativeTitleBar(true);
            this->setContentOwned(new MainComponent(), true);

            this->centreWithSize(getWidth(), getHeight());
            this->setVisible(true);
        }

        void closeButtonPressed() override
        {
            JUCEApplication::getInstance()->systemRequestedQuit();
        }

    private:
        
        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(MainWindow)
    };

private:
    
    ScopedPointer<MainWindow> mainWindow;
};

START_JUCE_APPLICATION (GoDeeperApplication)
